// src/utils.ts
import type { Profile } from './types/index.ts';
export const safeJsonParse = <T,>(s: string | undefined | null, fallback:T):T => { try { return s ? JSON.parse(s) as T : fallback; } catch { return fallback; }};
export const getInitialProfile = ():Profile => ({ id:null, roleData:{ profession:"", department: "", specificRole:"", description:"", key_responsibilities: "[]", day_to_day_tasks: "[]" }, skiveRatings:{ skills:{ cognitive   :{ analytical: 1, decisionMaking: 1, strategicPlanning: 1, criticalEvaluation: 1 }, interpersonal:{ communication: 1, collaboration: 1, empathy: 1, negotiation: 1 }, psychomotor :{ precision: 1, proceduralExecution: 1, coordination: 1 }, metacognitive:{ reflection: 1, adaptability: 1, selfRegulation: 1 } }, knowledge:{ declarative :{ conceptual: 1, factual: 1, theoretical: 1 }, procedural  :{ methods: 1, processes: 1, techniques: 1 }, conditional :{ whenToApply: 1, contextualUse: 1 } }, identity:{ professionalRole: 1, communityBelonging: 1, selfEfficacy: 1, dispositions: 1 }, values  :{ coreValues: 1, epistemicValues: 1, stakeholderValues: 1 }, ethics  :{ deontological: 1, consequentialist: 1, virtue: 1 } }, aleDesign:{ learningObjectives:{}, selectedAleComponents:{}, selectedSkiveApproaches:{} }, archetype:null });